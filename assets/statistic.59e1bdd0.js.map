{"version":3,"file":"statistic.59e1bdd0.js","sources":["../../node_modules/antd/es/theme/util/genComponentStyleHook.js","../../node_modules/antd/es/theme/util/statistic.js"],"sourcesContent":["import { useStyleRegister } from '@ant-design/cssinjs';\nimport { useContext } from 'react';\nimport { genCommonStyle, genLinkStyle } from '../../style';\nimport { ConfigContext } from '../../config-provider/context';\nimport { mergeToken, statisticToken, useToken } from '../internal';\nexport default function genComponentStyleHook(component, styleFn, getDefaultToken) {\n  return prefixCls => {\n    const [theme, token, hashId] = useToken();\n    const {\n      getPrefixCls,\n      iconPrefixCls\n    } = useContext(ConfigContext);\n    const rootPrefixCls = getPrefixCls();\n    // Generate style for all a tags in antd component.\n    useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: ['Shared', rootPrefixCls]\n    }, () => [{\n      // Link\n      '&': genLinkStyle(token)\n    }]);\n    return [useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: [component, prefixCls, iconPrefixCls]\n    }, () => {\n      const {\n        token: proxyToken,\n        flush\n      } = statisticToken(token);\n      const defaultComponentToken = typeof getDefaultToken === 'function' ? getDefaultToken(proxyToken) : getDefaultToken;\n      const mergedComponentToken = Object.assign(Object.assign({}, defaultComponentToken), token[component]);\n      const componentCls = `.${prefixCls}`;\n      const mergedToken = mergeToken(proxyToken, {\n        componentCls,\n        prefixCls,\n        iconCls: `.${iconPrefixCls}`,\n        antCls: `.${rootPrefixCls}`\n      }, mergedComponentToken);\n      const styleInterpolation = styleFn(mergedToken, {\n        hashId,\n        prefixCls,\n        rootPrefixCls,\n        iconPrefixCls,\n        overrideComponentToken: token[component]\n      });\n      flush(component, mergedComponentToken);\n      return [genCommonStyle(token, prefixCls), styleInterpolation];\n    }), hashId];\n  };\n}","const enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nlet recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\nexport function merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n  if (!enableStatistic) {\n    return Object.assign.apply(Object, [{}].concat(objs));\n  }\n  recording = false;\n  const ret = {};\n  objs.forEach(obj => {\n    const keys = Object.keys(obj);\n    keys.forEach(key => {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: () => obj[key]\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @private Internal Usage. Not use in your production. */\nexport const statistic = {};\n/** @private Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\nexport const _statistic_build_ = {};\n/* istanbul ignore next */\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\nexport default function statisticToken(token) {\n  let tokenKeys;\n  let proxy = token;\n  let flush = noop;\n  if (enableStatistic) {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n        return obj[prop];\n      }\n    });\n    flush = (componentName, componentToken) => {\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: componentToken\n      };\n    };\n  }\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush\n  };\n}"],"names":["useContext","mergeToken"],"mappings":";;AAKe,SAAS,sBAAsB,WAAW,SAAS,iBAAiB;AACjF,SAAO,eAAa;AAClB,UAAM,CAAC,OAAO,OAAO,MAAM,IAAI,SAAQ;AACvC,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACN,IAAQA,MAAAA,QAAAA,WAAW,aAAa;AAC5B,UAAM,gBAAgB;AAEtB,qBAAiB;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,CAAC,UAAU,aAAa;AAAA,IAC/B,GAAE,MAAM,CAAC;AAAA,MAER,KAAK,aAAa,KAAK;AAAA,IACxB,CAAA,CAAC;AACF,WAAO,CAAC,iBAAiB;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,CAAC,WAAW,WAAW,aAAa;AAAA,IAChD,GAAO,MAAM;AACP,YAAM;AAAA,QACJ,OAAO;AAAA,QACP;AAAA,MACR,IAAU,eAAe,KAAK;AACxB,YAAM,wBAAwB,OAAO,oBAAoB,aAAa,gBAAgB,UAAU,IAAI;AACpG,YAAM,uBAAuB,OAAO,OAAO,OAAO,OAAO,CAAE,GAAE,qBAAqB,GAAG,MAAM,UAAU;AACrG,YAAM,eAAe,IAAI;AACzB,YAAM,cAAcC,MAAW,YAAY;AAAA,QACzC;AAAA,QACA;AAAA,QACA,SAAS,IAAI;AAAA,QACb,QAAQ,IAAI;AAAA,MACb,GAAE,oBAAoB;AACvB,YAAM,qBAAqB,QAAQ,aAAa;AAAA,QAC9C;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,wBAAwB,MAAM;AAAA,MACtC,CAAO;AACD,YAAM,WAAW,oBAAoB;AACrC,aAAO,CAAC,eAAe,OAAO,SAAS,GAAG,kBAAkB;AAAA,IAClE,CAAK,GAAG,MAAM;AAAA,EACd;AACA;ACrDA,MAAM,kBAA2D,OAAO,sBAAsB;AAC9F,IAAI,YAAY;AAKT,SAAS,QAAQ;AACtB,WAAS,OAAO,UAAU,QAAQ,OAAO,IAAI,MAAM,IAAI,GAAG,OAAO,GAAG,OAAO,MAAM,QAAQ;AACvF,SAAK,QAAQ,UAAU;AAAA,EACxB;AAED,MAAI,CAAC,iBAAiB;AACpB,WAAO,OAAO,OAAO,MAAM,QAAQ,CAAC,CAAA,CAAE,EAAE,OAAO,IAAI,CAAC;AAAA,EACrD;AACD,cAAY;AACZ,QAAM,MAAM,CAAA;AACZ,OAAK,QAAQ,SAAO;AAClB,UAAM,OAAO,OAAO,KAAK,GAAG;AAC5B,SAAK,QAAQ,SAAO;AAClB,aAAO,eAAe,KAAK,KAAK;AAAA,QAC9B,cAAc;AAAA,QACd,YAAY;AAAA,QACZ,KAAK,MAAM,IAAI;AAAA,MACvB,CAAO;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACD,cAAY;AACZ,SAAO;AACT;AAOA,SAAS,OAAO;AAAE;AAEH,SAAS,eAAe,OAAO;AAC5C,MAAI;AACJ,MAAI,QAAQ;AACZ,MAAI,QAAQ;AACZ,MAAI,iBAAiB;AACnB,gBAAY,oBAAI;AAChB,YAAQ,IAAI,MAAM,OAAO;AAAA,MACvB,IAAI,KAAK,MAAM;AACb,YAAI,WAAW;AACb,oBAAU,IAAI,IAAI;AAAA,QACnB;AACD,eAAO,IAAI;AAAA,MACZ;AAAA,IACP,CAAK;AACD,YAAQ,CAAC,eAAe,mBAAmB;AACd,OAAA;AAAA,QACzB,QAAQ,MAAM,KAAK,SAAS;AAAA,QAC5B,WAAW;AAAA,MACnB;AAAA,IACA;AAAA,EACG;AACD,SAAO;AAAA,IACL,OAAO;AAAA,IACP,MAAM;AAAA,IACN;AAAA,EACJ;AACA;"}