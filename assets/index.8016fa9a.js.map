{"version":3,"file":"index.8016fa9a.js","sources":["../../src/components/Checkbox/context.ts","../../src/assets/img/heroicons/mini/check.tsx","../../src/components/Checkbox/Checkbox.tsx","../../src/components/Checkbox/Group.tsx","../../src/components/Checkbox/index.ts"],"sourcesContent":["import React from 'react';\n\nimport { CheckboxGroupContextProps } from './interface';\n\nconst CheckboxGroupContext = React.createContext<CheckboxGroupContextProps | null>(null);\n\nexport const CheckboxGroupContextProvider = CheckboxGroupContext.Provider;\n\nexport default CheckboxGroupContext;\n","interface Props {\n  className?: string;\n}\n\nconst Check = (props: Props) => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      viewBox='0 0 20 20'\n      fill='currentColor'\n      className={`w-4 h-4 ${props.className}`}\n    >\n      <path\n        fillRule='evenodd'\n        d='M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z'\n        clipRule='evenodd'\n      />\n    </svg>\n  );\n};\n\nexport default Check;\n","import React, { useContext, useState, useEffect } from 'react';\n\nimport HCControlItem from '../ControlItem';\nimport CheckboxGroupContext from './context';\nimport Check from '~/assets/img/heroicons/mini/check';\n\nimport { CheckboxProps, CheckboxValueType } from './interface';\nimport { InputChangeEvent, InputMouseEvent } from '../ControlItem/interface';\n\nconst HCCheckbox: React.ForwardRefRenderFunction<HTMLDivElement, CheckboxProps> = (\n  props: CheckboxProps,\n) => {\n  const groupContext = useContext(CheckboxGroupContext);\n  const [valueType, setValueType] = useState('');\n  const [ringClass, setRingClass] = useState('');\n  const [fillingClass, setFillingClass] = useState('');\n\n  const onChangeHandler = (e: InputChangeEvent) => {\n    const value = e.target.value;\n\n    if (groupContext && groupContext.onChange) {\n      let oriValue: CheckboxValueType;\n\n      // Handle boolean and number type cases.\n      switch (valueType) {\n        case 'boolean':\n          oriValue = value === 'true' ? true : false;\n          break;\n        case 'number':\n          oriValue = +value;\n          break;\n        default:\n          oriValue = value;\n          break;\n      }\n\n      groupContext.onChange(oriValue);\n    }\n\n    if (props.onChange) {\n      props.onChange(e);\n    }\n  };\n\n  const onClickHandler = (e: InputMouseEvent) => {\n    if (props.onClick) props.onClick(e);\n  };\n\n  // Replace value type because input value only receives string and number type.\n  const checkboxProps: Omit<CheckboxProps, 'value'> & { value: string } = {\n    ...props,\n    disabled: props.disabled || groupContext?.disabled,\n    value: `${props.value}`,\n    checked: groupContext ? groupContext.value.includes(props.value) : props.checked,\n    onChange: onChangeHandler,\n    onClick: onClickHandler,\n  };\n\n  useEffect(() => {\n    setValueType(typeof props.value);\n  }, [valueType, props.value]);\n\n  useEffect(() => {\n    if (checkboxProps.checked) {\n      if (checkboxProps.disabled) {\n        setRingClass('control-item-border-disenabled');\n        setFillingClass('control-item-bg-disenabled');\n      } else {\n        setRingClass('control-item-border-selected');\n        setFillingClass('control-item-bg-selected');\n      }\n    } else {\n      if (checkboxProps.disabled) {\n        setRingClass('control-item-border-disabled');\n        setFillingClass('control-item-bg-disabled');\n      } else {\n        setRingClass('control-item-border');\n        setFillingClass('control-item-bg');\n      }\n    }\n  }, [checkboxProps.checked, checkboxProps.disabled]);\n\n  return (\n    <HCControlItem\n      type='checkbox'\n      {...checkboxProps}\n      controller={\n        <div\n          className={`\n            input w-4 h-4 flex items-center justify-center\n            border ${ringClass}\n            rounded hover:border-hover`}\n        >\n          <div className={`rounded ${fillingClass}`}>\n            {checkboxProps.checked && <Check className='icon-onColor' />}\n          </div>\n        </div>\n      }\n    />\n  );\n};\n\nexport default HCCheckbox;\n","import { CheckboxGroupContextProvider } from './context';\nimport HCCheckbox from './Checkbox';\n\nimport type { GroupProps, CheckboxValueType } from './interface';\n\nconst HCCheckboxGroup: React.FC<GroupProps> = (props: GroupProps) => {\n  const onCheckboxChange = (value: CheckboxValueType) => {\n    if (props.onChange) {\n      const index = props.value.findIndex((item) => item === value);\n\n      if (index !== -1) {\n        props.onChange(props.value.filter((item) => item !== value));\n      } else {\n        const newList = props.value.map((item) => item);\n        newList.push(value);\n        props.onChange(newList);\n      }\n    }\n  };\n\n  const children =\n    props.options && props.options.length > 0\n      ? props.options.map((item, index) => <HCCheckbox key={index} {...item} />)\n      : props.children;\n\n  return (\n    <div className={`${props.className} grid ${props.image ? 'grid-cols-3 gap-4' : 'gap-y-2'}`}>\n      <CheckboxGroupContextProvider\n        value={{\n          value: props.value,\n          disabled: props.disabled,\n          onChange: onCheckboxChange,\n        }}\n      >\n        {children}\n      </CheckboxGroupContextProvider>\n    </div>\n  );\n};\n\nexport default HCCheckboxGroup;\n","import Checkbox from './Checkbox';\nimport Group from './Group';\n\nimport type { CheckboxProps, GroupProps } from './interface';\n\nexport type { CheckboxProps, GroupProps } from './interface';\n\nexport type Checkbox = React.ForwardRefExoticComponent<CheckboxProps>;\nexport type CheckboxGroup = React.ForwardRefExoticComponent<GroupProps>;\nexport type { CheckboxValueType } from './interface';\n\nexport const HCCheckbox = Checkbox as Checkbox;\nexport const HCCheckboxGroup = Group as CheckboxGroup;\n"],"names":["CheckboxGroupContext","React","CheckboxGroupContextProvider","Check","props","_jsx","className","HCCheckbox","groupContext","useContext","valueType","setValueType","useState","ringClass","setRingClass","fillingClass","setFillingClass","onChangeHandler","e","value","target","onChange","oriValue","onClickHandler","onClick","checkboxProps","disabled","checked","includes","useEffect","HCControlItem","type","controller","children","HCCheckboxGroup","onCheckboxChange","item","newList","index","Checkbox","Group"],"mappings":"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"}