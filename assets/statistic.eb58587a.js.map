{"version":3,"file":"statistic.eb58587a.js","sources":["../../node_modules/antd/es/theme/util/genComponentStyleHook.js","../../node_modules/antd/es/theme/util/statistic.js"],"sourcesContent":["import { useStyleRegister } from '@ant-design/cssinjs';\nimport { useContext } from 'react';\nimport { genCommonStyle, genLinkStyle } from '../../style';\nimport { ConfigContext } from '../../config-provider/context';\nimport { mergeToken, statisticToken, useToken } from '../internal';\nexport default function genComponentStyleHook(component, styleFn, getDefaultToken) {\n  return prefixCls => {\n    const [theme, token, hashId] = useToken();\n    const {\n      getPrefixCls,\n      iconPrefixCls\n    } = useContext(ConfigContext);\n    const rootPrefixCls = getPrefixCls();\n    // Generate style for all a tags in antd component.\n    useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: ['Shared', rootPrefixCls]\n    }, () => [{\n      // Link\n      '&': genLinkStyle(token)\n    }]);\n    return [useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: [component, prefixCls, iconPrefixCls]\n    }, () => {\n      const {\n        token: proxyToken,\n        flush\n      } = statisticToken(token);\n      const defaultComponentToken = typeof getDefaultToken === 'function' ? getDefaultToken(proxyToken) : getDefaultToken;\n      const mergedComponentToken = Object.assign(Object.assign({}, defaultComponentToken), token[component]);\n      const componentCls = `.${prefixCls}`;\n      const mergedToken = mergeToken(proxyToken, {\n        componentCls,\n        prefixCls,\n        iconCls: `.${iconPrefixCls}`,\n        antCls: `.${rootPrefixCls}`\n      }, mergedComponentToken);\n      const styleInterpolation = styleFn(mergedToken, {\n        hashId,\n        prefixCls,\n        rootPrefixCls,\n        iconPrefixCls,\n        overrideComponentToken: token[component]\n      });\n      flush(component, mergedComponentToken);\n      return [genCommonStyle(token, prefixCls), styleInterpolation];\n    }), hashId];\n  };\n}","const enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nlet recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\nexport function merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n  if (!enableStatistic) {\n    return Object.assign.apply(Object, [{}].concat(objs));\n  }\n  recording = false;\n  const ret = {};\n  objs.forEach(obj => {\n    const keys = Object.keys(obj);\n    keys.forEach(key => {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: () => obj[key]\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @private Internal Usage. Not use in your production. */\nexport const statistic = {};\n/** @private Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\nexport const _statistic_build_ = {};\n/* istanbul ignore next */\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\nexport default function statisticToken(token) {\n  let tokenKeys;\n  let proxy = token;\n  let flush = noop;\n  if (enableStatistic) {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n        return obj[prop];\n      }\n    });\n    flush = (componentName, componentToken) => {\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: componentToken\n      };\n    };\n  }\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush\n  };\n}"],"names":["genComponentStyleHook","component","styleFn","getDefaultToken","prefixCls","theme","token","hashId","useToken","getPrefixCls","iconPrefixCls","useContext","ConfigContext","rootPrefixCls","useStyleRegister","genLinkStyle","proxyToken","flush","statisticToken","defaultComponentToken","mergedComponentToken","componentCls","mergedToken","mergeToken","styleInterpolation","genCommonStyle","enableStatistic","recording","merge","_len","objs","_key","ret","obj","key","noop","tokenKeys","proxy","prop","componentName","componentToken"],"mappings":"4GAKe,SAASA,EAAsBC,EAAWC,EAASC,EAAiB,CACjF,OAAOC,GAAa,CAClB,KAAM,CAACC,EAAOC,EAAOC,CAAM,EAAIC,EAAQ,EACjC,CACJ,aAAAC,EACA,cAAAC,CACN,EAAQC,EAAAA,QAAAA,WAAWC,CAAa,EACtBC,EAAgBJ,IAEtB,OAAAK,EAAiB,CACf,MAAAT,EACA,MAAAC,EACA,OAAAC,EACA,KAAM,CAAC,SAAUM,CAAa,CAC/B,EAAE,IAAM,CAAC,CAER,IAAKE,EAAaT,CAAK,CACxB,CAAA,CAAC,EACK,CAACQ,EAAiB,CACvB,MAAAT,EACA,MAAAC,EACA,OAAAC,EACA,KAAM,CAACN,EAAWG,EAAWM,CAAa,CAChD,EAAO,IAAM,CACP,KAAM,CACJ,MAAOM,EACP,MAAAC,CACR,EAAUC,EAAeZ,CAAK,EAClBa,EAAwB,OAAOhB,GAAoB,WAAaA,EAAgBa,CAAU,EAAIb,EAC9FiB,EAAuB,OAAO,OAAO,OAAO,OAAO,CAAE,EAAED,CAAqB,EAAGb,EAAML,EAAU,EAC/FoB,EAAe,IAAIjB,IACnBkB,EAAcC,EAAWP,EAAY,CACzC,aAAAK,EACA,UAAAjB,EACA,QAAS,IAAIM,IACb,OAAQ,IAAIG,GACb,EAAEO,CAAoB,EACjBI,EAAqBtB,EAAQoB,EAAa,CAC9C,OAAAf,EACA,UAAAH,EACA,cAAAS,EACA,cAAAH,EACA,uBAAwBJ,EAAML,EACtC,CAAO,EACD,OAAAgB,EAAMhB,EAAWmB,CAAoB,EAC9B,CAACK,EAAenB,EAAOF,CAAS,EAAGoB,CAAkB,CAClE,CAAK,EAAGjB,CAAM,CACd,CACA,CCrDA,MAAMmB,EAA2D,OAAO,kBAAsB,IAC9F,IAAIC,EAAY,GAKT,SAASC,GAAQ,CACtB,QAASC,EAAO,UAAU,OAAQC,EAAO,IAAI,MAAMD,CAAI,EAAGE,EAAO,EAAGA,EAAOF,EAAME,IAC/ED,EAAKC,GAAQ,UAAUA,GAGzB,GAAI,CAACL,EACH,OAAO,OAAO,OAAO,MAAM,OAAQ,CAAC,CAAA,CAAE,EAAE,OAAOI,CAAI,CAAC,EAEtDH,EAAY,GACZ,MAAMK,EAAM,CAAA,EACZ,OAAAF,EAAK,QAAQG,GAAO,CACL,OAAO,KAAKA,CAAG,EACvB,QAAQC,GAAO,CAClB,OAAO,eAAeF,EAAKE,EAAK,CAC9B,aAAc,GACd,WAAY,GACZ,IAAK,IAAMD,EAAIC,EACvB,CAAO,CACP,CAAK,CACL,CAAG,EACDP,EAAY,GACLK,CACT,CAOA,SAASG,GAAO,CAAE,CAEH,SAASjB,EAAeZ,EAAO,CAC5C,IAAI8B,EACAC,EAAQ/B,EACRW,EAAQkB,EACZ,OAAIT,IACFU,EAAY,IAAI,IAChBC,EAAQ,IAAI,MAAM/B,EAAO,CACvB,IAAI2B,EAAKK,EAAM,CACb,OAAIX,GACFS,EAAU,IAAIE,CAAI,EAEbL,EAAIK,EACZ,CACP,CAAK,EACDrB,EAAQ,CAACsB,EAAeC,IAAmB,CAE/B,MAAM,KAAKJ,CAAS,CAGpC,GAES,CACL,MAAOC,EACP,KAAMD,EACN,MAAAnB,CACJ,CACA"}